name: codex-change-v2
on:
  workflow_dispatch:
    inputs:
      task:
        description: "What Codex should do"
        required: true
      branch:
        description: "Target feature branch (will be created if missing)"
        required: true
      base:
        description: "Base branch to branch from"
        default: "main"
        required: true

jobs:
  apply-codex-change:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base }}

      - name: Ensure feature branch
        run: |
          git fetch origin ${{ github.event.inputs.branch }} || true
          if git rev-parse --verify origin/${{ github.event.inputs.branch }} >/dev/null 2>&1; then
            git checkout ${{ github.event.inputs.branch }}
            git merge --no-edit origin/${{ github.event.inputs.branch }} || true
          else
            git checkout -b ${{ github.event.inputs.branch }}
          fi

      - name: Install Codex CLI
        run: npm i -g @openai/codex

      - name: Run Codex in automation mode
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          codex exec --model gpt-4o --full-auto "${{ github.event.inputs.task }}"

      - id: commit_push
        name: Commit & push (and detect remote branch)
        run: |
          set -e
          BR="${{ github.event.inputs.branch }}"

          git config user.name "codex-bot"
          git config user.email "codex-bot@users.noreply.github.com"
          git add -A

          # Başta yoksa: pushed=false
          echo "pushed=false" >> $GITHUB_OUTPUT

          # Değişiklik var mı?
          if git diff --cached --quiet; then
            echo "No changes from Codex."
          else
            git commit -m "feat: Codex-applied changes"
            git push origin HEAD:$BR
            echo "pushed=true" >> $GITHUB_OUTPUT
          fi

          # Uzakta branch var mı?
          if git ls-remote --heads origin "$BR" | grep -q "$BR"; then
            echo "remote_branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "remote_branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Open PR
        if: steps.commit_push.outputs.remote_branch_exists == 'true'
        uses: actions/github-script@v7
        with:
          # Kurumsal kısıtlama varsa GH_PAT kullanın, yoksa varsayılan token yeter:
          github-token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const headBranch = "${{ github.event.inputs.branch }}";
            const baseBranch = "${{ github.event.inputs.base }}";

            // Mevcut açık PR var mı? (aynı repo olduğunda owner:branch ile aramak doğru)
            const { data: prs } = await github.rest.pulls.list({
              owner, repo, state: "open",
              head: `${owner}:${headBranch}`
            });

            if (prs.length === 0) {
              // PR oluştur (aynı repo → head yalnızca branch adı)
              const pr = await github.rest.pulls.create({
                owner, repo,
                title: "feat: Codex-applied changes",
                head: headBranch,
                base: baseBranch,
                body: "Automated by Codex CLI."
              });
              core.notice(`PR opened: ${pr.data.html_url}`);
            } else {
              core.notice(`Existing PR: ${prs[0].html_url}`);
            }

      - name: Explain why PR not created
        if: steps.commit_push.outputs.remote_branch_exists != 'true'
        run: |
          echo "::notice title=PR Skipped::Remote branch '${{ github.event.inputs.branch }}' does not exist on origin."
          echo "Most common causes:"
          echo "1) Codex produced no changes (nothing to commit/push)."
          echo "2) Push failed or was blocked by permissions."
          echo "If you expect a PR, ensure Codex modifies files or create the branch explicitly, then rerun."


name: codex-change
on:
  workflow_dispatch:
    inputs:
      task:
        description: "What Codex should do"
        required: true
      branch:
        description: "Target feature branch (will be created if missing)"
        required: true
      base:
        description: "Base branch to branch from"
        default: "master"
        required: true

jobs:
  apply-codex-change:
    runs-on: ubuntu-latest
    permissions:
      contents: write        # commit/push
      pull-requests: write   # PR açma
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base }}

      - name: Ensure feature branch
        run: |
          git fetch origin ${{ github.event.inputs.branch }} || true
          if git rev-parse --verify origin/${{ github.event.inputs.branch }} >/dev/null 2>&1; then
            git checkout ${{ github.event.inputs.branch }}
          else
            git checkout -b ${{ github.event.inputs.branch }}
          fi

      - name: Install Codex CLI
        run: |
          npm i -g @openai/codex

      - name: Run Codex in automation mode
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          codex exec --model gpt-4o --full-auto "${{ github.event.inputs.task }}"

      - name: Commit & push
        run: |
          git config user.name "codex-bot"
          git config user.email "codex-bot@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes from Codex."
            exit 0
          fi
          git commit -m "feat: Codex-applied changes"
          git push origin HEAD:${{ github.event.inputs.branch }}

      - name: Open PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              head: `${context.repo.owner}:${{ github.event.inputs.branch }}`
            });

            if (prs.length === 0) {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "feat: Codex-applied changes",
                head: "${{ github.event.inputs.branch }}",
                base: "${{ github.event.inputs.base }}",
                body: "Automated by Codex CLI."
              });
              core.notice(`PR opened: ${pr.data.html_url}`);
            } else {
              core.notice(`Existing PR: ${prs[0].html_url}`);
            }
