name: codex-change

on:
  workflow_dispatch:
    inputs:
      task:
        description: "What Codex should do (plain English instructions)"
        required: true
      branch:
        description: "Target feature branch (will be created if missing)"
        required: true
      base:
        description: "Base branch to branch from"
        default: "master"
        required: true

jobs:
  apply-codex-change:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout base
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base }}

      - name: Ensure feature branch exists and is checked out
        shell: bash
        run: |
          set -euo pipefail
          BR="${{ github.event.inputs.branch }}"
          # Try to fetch remote branch (ok if not found)
          git fetch origin "$BR" || true
          if git rev-parse --verify "origin/$BR" >/dev/null 2>&1; then
            git checkout -B "$BR" "origin/$BR"
          else
            git checkout -b "$BR"
          fi

      - name: Install Codex CLI
        run: npm i -g @openai/codex

      - name: Run Codex (edit files in-place)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          # Build final instruction with a short guardrail header
          cat > task.txt <<'TASK'
          IMPORTANT: Apply changes by directly editing files in this repository.
          Do NOT create or write patch files under /tmp. Save edits in-place.

          TASK
          printf '%s\n' "${{ github.event.inputs.task }}" >> task.txt

          echo "===== BEGIN TASK ====="
          cat task.txt
          echo "=====  END TASK  ====="

          # Execute Codex (no --stdin; pass the prompt as a single argument)
          # Capture transcript for troubleshooting
          codex exec --model gpt-4o --full-auto -- "$(cat task.txt)" \
            2>&1 | tee codex-transcript.log

      - name: Verify workspace changed
        shell: bash
        run: |
          set -euo pipefail
          # Show a short status and diff summary for visibility
          echo "----- git status (porcelain) -----"
          git status --porcelain=v1
          echo "----------------------------------"
          if ! git status --porcelain=v1 | grep -q .; then
            echo "::error title=Codex made no changes::No modified files found after Codex execution."
            echo "Tip: Make your 'task' super explicit about which parts to add/change."
            exit 1
          fi
          echo "Workspace has changes."

      - id: commit_push
        name: Commit & push
        shell: bash
        run: |
          set -euo pipefail
          BR="${{ github.event.inputs.branch }}"

          git config user.name  "codex-bot"
          git config user.email "codex-bot@users.noreply.github.com"

          # Show a brief diff (optional, helpful in logs)
          echo "----- git diff --staged (pre-add) -----"
          git diff --staged || true
          echo "---------------------------------------"

          git add -A
          echo "pushed=false" >> "$GITHUB_OUTPUT"

          if git diff --cached --quiet; then
            echo "No staged changes (unexpected at this point)."
          else
            git commit -m "feat: Codex-applied changes"
            git push origin HEAD:"$BR"
            echo "pushed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Open PR
        if: steps.commit_push.outputs.pushed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const headBranch = "${{ github.event.inputs.branch }}";
            const baseBranch = "${{ github.event.inputs.base }}";

            // If an open PR from this branch already exists, surface it
            const { data: prs } = await github.rest.pulls.list({
              owner, repo, state: "open",
              head: `${owner}:${headBranch}`
            });

            if (prs.length) {
              core.notice(`Existing PR: ${prs[0].html_url}`);
            } else {
              const pr = await github.rest.pulls.create({
                owner, repo,
                title: "feat: Codex-applied changes",
                head: headBranch,  // same-repo â†’ use plain branch name
                base: baseBranch,
                body: [
                  "Automated by Codex CLI.",
                  "",
                  "Transcript artifact: check job logs for 'codex-transcript.log'."
                ].join("\n")
              });
              core.notice(`PR opened: ${pr.data.html_url}`);
            }

      - name: Explain why PR not created
        if: steps.commit_push.outputs.pushed != 'true'
        shell: bash
        run: |
          echo "::notice title=PR Skipped::No commit was pushed."
          echo "Most common causes:"
          echo "1) Codex produced no concrete file edits (only logs/patch drafts)."
          echo "2) Edits failed due to context mismatch."
          echo "3) Guardrails prevented changes."
          echo ""
          echo "See 'codex-transcript.log' in the job logs for details."
