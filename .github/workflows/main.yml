name: codex-change
on:
  workflow_dispatch:
    inputs:
      task:
        description: "What Codex should do"
        required: true
      branch:
        description: "Target feature branch (will be created if missing)"
        required: true
      base:
        description: "Base branch to branch from"
        default: "master"
        required: true

jobs:
  apply-codex-change:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base }}

      - name: Debug Environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Git version: $(git --version)"
          echo "Current directory: $(pwd)"
          echo "Task input length: ${#TASK_INPUT}"
          echo "Branch: ${{ github.event.inputs.branch }}"
          echo "Base: ${{ github.event.inputs.base }}"
        env:
          TASK_INPUT: ${{ github.event.inputs.task }}

      - name: Ensure feature branch
        run: |
          git fetch origin ${{ github.event.inputs.branch }} || true
          if git rev-parse --verify origin/${{ github.event.inputs.branch }} >/dev/null 2>&1; then
            git checkout ${{ github.event.inputs.branch }}
            git merge --no-edit origin/${{ github.event.inputs.branch }} || true
            echo "::notice title=Branch Status::Switched to existing branch ${{ github.event.inputs.branch }}"
          else
            git checkout -b ${{ github.event.inputs.branch }}
            echo "::notice title=Branch Status::Created new branch ${{ github.event.inputs.branch }}"
          fi

      - name: Install Codex CLI
        run: |
          echo "Installing Codex CLI..."
          npm i -g @openai/codex || {
            echo "::error title=Installation Failed::Failed to install @openai/codex"
            echo "This package may not exist. Consider using OpenAI API directly."
            exit 1
          }
          
          # Verify installation
          if command -v codex >/dev/null 2>&1; then
            echo "::notice title=Installation Success::Codex CLI installed successfully"
            codex --version || echo "Version command not available"
          else
            echo "::error title=Installation Failed::Codex CLI not found after installation"
            exit 1
          fi

      - name: Prepare prompt
        run: |
          # Use heredoc to safely handle special characters
          cat > prompt.txt << 'EOF'
          ${{ github.event.inputs.task }}
          EOF
          
          echo "::notice title=Prompt Ready::Prompt file created successfully"
          echo "Prompt content (first 200 chars):"
          head -c 200 prompt.txt
          if [ $(wc -c < prompt.txt) -gt 200 ]; then
            echo "... (truncated)"
          fi

      - name: Run Codex in automation mode
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e
          
          # Verify API key is set
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "::error title=Missing API Key::OPENAI_API_KEY secret is not set"
            exit 1
          fi
          
          echo "::notice title=Codex Execution::Starting Codex execution..."
          
          # Run codex with error handling
          if codex exec --model gpt-4o --full-auto --stdin < prompt.txt; then
            echo "::notice title=Codex Success::Codex execution completed successfully"
          else
            echo "::error title=Codex Failed::Codex execution failed"
            echo "This might be due to:"
            echo "1. Invalid API key"
            echo "2. API quota exceeded"
            echo "3. Network issues"
            echo "4. Invalid model name or parameters"
            exit 1
          fi

      - name: Check for changes
        id: changes
        run: |
          # Check if any files were modified
          git add -A
          if git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "::notice title=No Changes::Codex produced no changes to the codebase"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "::notice title=Changes Detected::Codex modified the following files:"
            git diff --cached --name-only
          fi

      - id: commit_push
        name: Commit & push (and detect remote branch)
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          set -e
          BR="${{ github.event.inputs.branch }}"
          git config user.name "codex-bot"
          git config user.email "codex-bot@users.noreply.github.com"
          
          echo "pushed=false" >> $GITHUB_OUTPUT
          
          # Create detailed commit message
          COMMIT_MSG="feat: Codex-applied changes

          Task: ${{ github.event.inputs.task }}
          Branch: ${{ github.event.inputs.branch }}
          Base: ${{ github.event.inputs.base }}
          
          Files modified:
          $(git diff --cached --name-only | sed 's/^/- /')"
          
          git commit -m "$COMMIT_MSG"
          
          # Push with error handling
          if git push origin HEAD:$BR; then
            echo "pushed=true" >> $GITHUB_OUTPUT
            echo "::notice title=Push Success::Changes pushed to branch $BR"
          else
            echo "::error title=Push Failed::Failed to push changes to remote branch"
            exit 1
          fi
          
          # Check if remote branch exists (should exist now after push)
          if git ls-remote --heads origin "$BR" | grep -q "$BR"; then
            echo "remote_branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "remote_branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Open PR
        if: steps.commit_push.outputs.remote_branch_exists == 'true' && steps.changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const headBranch = "${{ github.event.inputs.branch }}";
            const baseBranch = "${{ github.event.inputs.base }}";
            
            try {
              // Check for existing open PRs
              const { data: prs } = await github.rest.pulls.list({
                owner,
                repo,
                state: "open",
                head: `${owner}:${headBranch}`,
                base: baseBranch
              });
              
              if (prs.length === 0) {
                // Create new PR
                const prBody = `## Automated by Codex CLI
                
                **Task:** ${{ github.event.inputs.task }}
                
                **Base Branch:** ${baseBranch}
                **Feature Branch:** ${headBranch}
                
                This PR was automatically generated by the Codex workflow.
                Please review the changes carefully before merging.`;
                
                const pr = await github.rest.pulls.create({
                  owner,
                  repo,
                  title: "feat: Codex-applied changes",
                  head: headBranch,
                  base: baseBranch,
                  body: prBody
                });
                
                core.notice(`✅ PR created successfully: ${pr.data.html_url}`);
              } else {
                core.notice(`ℹ️ Existing PR found: ${prs[0].html_url}`);
              }
            } catch (error) {
              core.setFailed(`Failed to create/check PR: ${error.message}`);
            }

      - name: Workflow Summary
        if: always()
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Task:** ${{ github.event.inputs.task }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.event.inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base:** ${{ github.event.inputs.base }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes Detected:** ${{ steps.changes.outputs.has_changes || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pushed:** ${{ steps.commit_push.outputs.pushed || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Remote Branch Exists:** ${{ steps.commit_push.outputs.remote_branch_exists || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.changes.outputs.has_changes }}" != "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### No Changes Applied" >> $GITHUB_STEP_SUMMARY
            echo "Codex did not modify any files. This could mean:" >> $GITHUB_STEP_SUMMARY
            echo "- The task was already completed" >> $GITHUB_STEP_SUMMARY
            echo "- The instructions were unclear" >> $GITHUB_STEP_SUMMARY
            echo "- No code changes were needed" >> $GITHUB_STEP_SUMMARY
          fi
